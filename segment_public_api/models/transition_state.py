# coding: utf-8

"""
    Segment Public API

    The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 

    The version of the OpenAPI document: 58.1.1
    Contact: friends@segment.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from segment_public_api.models.audience_entry_state import AudienceEntryState
from segment_public_api.models.condition_split_state import ConditionSplitState
from segment_public_api.models.destination_state import DestinationState
from segment_public_api.models.event_entry_state import EventEntryState
from segment_public_api.models.event_split_with_timeout_state import EventSplitWithTimeoutState
from segment_public_api.models.random_split_state import RandomSplitState
from segment_public_api.models.simple_delay_state import SimpleDelayState
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

TRANSITIONSTATE_ONE_OF_SCHEMAS = ["AudienceEntryState", "ConditionSplitState", "DestinationState", "EventEntryState", "EventSplitWithTimeoutState", "RandomSplitState", "SimpleDelayState"]

class TransitionState(BaseModel):
    """
    TransitionState
    """
    # data type: EventEntryState
    oneof_schema_1_validator: Optional[EventEntryState] = None
    # data type: AudienceEntryState
    oneof_schema_2_validator: Optional[AudienceEntryState] = None
    # data type: DestinationState
    oneof_schema_3_validator: Optional[DestinationState] = None
    # data type: SimpleDelayState
    oneof_schema_4_validator: Optional[SimpleDelayState] = None
    # data type: EventSplitWithTimeoutState
    oneof_schema_5_validator: Optional[EventSplitWithTimeoutState] = None
    # data type: ConditionSplitState
    oneof_schema_6_validator: Optional[ConditionSplitState] = None
    # data type: RandomSplitState
    oneof_schema_7_validator: Optional[RandomSplitState] = None
    if TYPE_CHECKING:
        actual_instance: Union[AudienceEntryState, ConditionSplitState, DestinationState, EventEntryState, EventSplitWithTimeoutState, RandomSplitState, SimpleDelayState]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(TRANSITIONSTATE_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = TransitionState.construct()
        error_messages = []
        match = 0
        # validate data type: EventEntryState
        if not isinstance(v, EventEntryState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventEntryState`")
        else:
            match += 1
        # validate data type: AudienceEntryState
        if not isinstance(v, AudienceEntryState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AudienceEntryState`")
        else:
            match += 1
        # validate data type: DestinationState
        if not isinstance(v, DestinationState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DestinationState`")
        else:
            match += 1
        # validate data type: SimpleDelayState
        if not isinstance(v, SimpleDelayState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SimpleDelayState`")
        else:
            match += 1
        # validate data type: EventSplitWithTimeoutState
        if not isinstance(v, EventSplitWithTimeoutState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventSplitWithTimeoutState`")
        else:
            match += 1
        # validate data type: ConditionSplitState
        if not isinstance(v, ConditionSplitState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ConditionSplitState`")
        else:
            match += 1
        # validate data type: RandomSplitState
        if not isinstance(v, RandomSplitState):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RandomSplitState`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in TransitionState with oneOf schemas: AudienceEntryState, ConditionSplitState, DestinationState, EventEntryState, EventSplitWithTimeoutState, RandomSplitState, SimpleDelayState. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in TransitionState with oneOf schemas: AudienceEntryState, ConditionSplitState, DestinationState, EventEntryState, EventSplitWithTimeoutState, RandomSplitState, SimpleDelayState. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> TransitionState:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> TransitionState:
        """Returns the object represented by the json string"""
        instance = TransitionState.construct()
        error_messages = []
        match = 0

        # deserialize data into EventEntryState
        try:
            instance.actual_instance = EventEntryState.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AudienceEntryState
        try:
            instance.actual_instance = AudienceEntryState.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DestinationState
        try:
            instance.actual_instance = DestinationState.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SimpleDelayState
        try:
            instance.actual_instance = SimpleDelayState.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventSplitWithTimeoutState
        try:
            instance.actual_instance = EventSplitWithTimeoutState.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ConditionSplitState
        try:
            instance.actual_instance = ConditionSplitState.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RandomSplitState
        try:
            instance.actual_instance = RandomSplitState.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into TransitionState with oneOf schemas: AudienceEntryState, ConditionSplitState, DestinationState, EventEntryState, EventSplitWithTimeoutState, RandomSplitState, SimpleDelayState. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into TransitionState with oneOf schemas: AudienceEntryState, ConditionSplitState, DestinationState, EventEntryState, EventSplitWithTimeoutState, RandomSplitState, SimpleDelayState. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


