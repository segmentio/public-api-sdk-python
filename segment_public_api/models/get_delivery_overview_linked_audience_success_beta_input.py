# coding: utf-8

"""
    Segment Public API

    The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 

    The version of the OpenAPI document: 50.3.0
    Contact: friends@segment.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from segment_public_api.models.delivery_overview_audience_filter_by import DeliveryOverviewAudienceFilterBy
from segment_public_api.models.pagination_input import PaginationInput

class GetDeliveryOverviewLinkedAudienceSuccessBetaInput(BaseModel):
    """
    Input of the Delivery Overview Successful Delivery step.  # noqa: E501
    """
    source_id: StrictStr = Field(..., alias="sourceId", description="The sourceId for the Workspace.")
    destination_config_id: StrictStr = Field(..., alias="destinationConfigId", description="The id tied to a Workspace Destination.")
    start_time: StrictStr = Field(..., alias="startTime", description="The ISO8601 formatted timestamp corresponding to the beginning of the requested timeframe, inclusive.")
    end_time: StrictStr = Field(..., alias="endTime", description="The ISO8601 formatted timestamp corresponding to the end of the requested timeframe, noninclusive.")
    group_by: Optional[conlist(StrictStr)] = Field(None, alias="groupBy", description="A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: `eventName`, `eventType`, `activationId`, `audienceId`, and `spaceId`.")
    granularity: StrictStr = Field(..., description="The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past")
    filter: Optional[DeliveryOverviewAudienceFilterBy] = None
    pagination: Optional[PaginationInput] = None
    __properties = ["sourceId", "destinationConfigId", "startTime", "endTime", "groupBy", "granularity", "filter", "pagination"]

    @validator('granularity')
    def granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DAY', 'HOUR', 'MINUTE'):
            raise ValueError("must be one of enum values ('DAY', 'HOUR', 'MINUTE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetDeliveryOverviewLinkedAudienceSuccessBetaInput:
        """Create an instance of GetDeliveryOverviewLinkedAudienceSuccessBetaInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pagination
        if self.pagination:
            _dict['pagination'] = self.pagination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetDeliveryOverviewLinkedAudienceSuccessBetaInput:
        """Create an instance of GetDeliveryOverviewLinkedAudienceSuccessBetaInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetDeliveryOverviewLinkedAudienceSuccessBetaInput.parse_obj(obj)

        _obj = GetDeliveryOverviewLinkedAudienceSuccessBetaInput.parse_obj({
            "source_id": obj.get("sourceId"),
            "destination_config_id": obj.get("destinationConfigId"),
            "start_time": obj.get("startTime"),
            "end_time": obj.get("endTime"),
            "group_by": obj.get("groupBy"),
            "granularity": obj.get("granularity"),
            "filter": DeliveryOverviewAudienceFilterBy.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "pagination": PaginationInput.from_dict(obj.get("pagination")) if obj.get("pagination") is not None else None
        })
        return _obj


