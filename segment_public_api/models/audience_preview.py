# coding: utf-8

"""
    Segment Public API

    The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 

    The version of the OpenAPI document: 58.7.0
    Contact: friends@segment.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from segment_public_api.models.audience_preview_any_of import AudiencePreviewAnyOf
from segment_public_api.models.audience_preview_any_of1 import AudiencePreviewAnyOf1
from segment_public_api.models.audience_preview_any_of2 import AudiencePreviewAnyOf2
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

AUDIENCEPREVIEW_ANY_OF_SCHEMAS = ["AudiencePreviewAnyOf", "AudiencePreviewAnyOf1", "AudiencePreviewAnyOf2"]

class AudiencePreview(BaseModel):
    """
    Audience preview that can be in one of the three states: completed, running, or failed.
    """

    # data type: AudiencePreviewAnyOf
    anyof_schema_1_validator: Optional[AudiencePreviewAnyOf] = None
    # data type: AudiencePreviewAnyOf1
    anyof_schema_2_validator: Optional[AudiencePreviewAnyOf1] = None
    # data type: AudiencePreviewAnyOf2
    anyof_schema_3_validator: Optional[AudiencePreviewAnyOf2] = None
    if TYPE_CHECKING:
        actual_instance: Union[AudiencePreviewAnyOf, AudiencePreviewAnyOf1, AudiencePreviewAnyOf2]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(AUDIENCEPREVIEW_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = AudiencePreview.construct()
        error_messages = []
        # validate data type: AudiencePreviewAnyOf
        if not isinstance(v, AudiencePreviewAnyOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AudiencePreviewAnyOf`")
        else:
            return v

        # validate data type: AudiencePreviewAnyOf1
        if not isinstance(v, AudiencePreviewAnyOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AudiencePreviewAnyOf1`")
        else:
            return v

        # validate data type: AudiencePreviewAnyOf2
        if not isinstance(v, AudiencePreviewAnyOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AudiencePreviewAnyOf2`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in AudiencePreview with anyOf schemas: AudiencePreviewAnyOf, AudiencePreviewAnyOf1, AudiencePreviewAnyOf2. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> AudiencePreview:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> AudiencePreview:
        """Returns the object represented by the json string"""
        instance = AudiencePreview.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[AudiencePreviewAnyOf] = None
        try:
            instance.actual_instance = AudiencePreviewAnyOf.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[AudiencePreviewAnyOf1] = None
        try:
            instance.actual_instance = AudiencePreviewAnyOf1.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[AudiencePreviewAnyOf2] = None
        try:
            instance.actual_instance = AudiencePreviewAnyOf2.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AudiencePreview with anyOf schemas: AudiencePreviewAnyOf, AudiencePreviewAnyOf1, AudiencePreviewAnyOf2. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


