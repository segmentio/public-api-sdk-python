# coding: utf-8

"""
    Segment Public API

    The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 

    The version of the OpenAPI document: 58.7.0
    Contact: friends@segment.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from segment_public_api.models.audience_definition_without_type import AudienceDefinitionWithoutType
from segment_public_api.models.audience_preview_options import AudiencePreviewOptions
from segment_public_api.models.audience_preview_result import AudiencePreviewResult
from segment_public_api.models.audience_size import AudienceSize

class CompletedAudiencePreview(BaseModel):
    """
    Audience preview that has been completed.  # noqa: E501
    """
    status: StrictStr = Field(..., description="Status for the audience preview.")
    results: conlist(AudiencePreviewResult) = Field(..., description="Sampled result membership for the audience preview.")
    size: AudienceSize = Field(...)
    id: StrictStr = Field(..., description="Unique identifier for tracking and retrieving results of an audience preview.")
    audience_type: StrictStr = Field(..., alias="audienceType", description="The audience type of the preview.")
    definition: AudienceDefinitionWithoutType = Field(...)
    options: AudiencePreviewOptions = Field(...)
    __properties = ["status", "results", "size", "id", "audienceType", "definition", "options"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('COMPLETED'):
            raise ValueError("must be one of enum values ('COMPLETED')")
        return value

    @validator('audience_type')
    def audience_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ACCOUNTS', 'USERS'):
            raise ValueError("must be one of enum values ('ACCOUNTS', 'USERS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompletedAudiencePreview:
        """Create an instance of CompletedAudiencePreview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['definition'] = self.definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompletedAudiencePreview:
        """Create an instance of CompletedAudiencePreview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompletedAudiencePreview.parse_obj(obj)

        _obj = CompletedAudiencePreview.parse_obj({
            "status": obj.get("status"),
            "results": [AudiencePreviewResult.from_dict(_item) for _item in obj.get("results")] if obj.get("results") is not None else None,
            "size": AudienceSize.from_dict(obj.get("size")) if obj.get("size") is not None else None,
            "id": obj.get("id"),
            "audience_type": obj.get("audienceType"),
            "definition": AudienceDefinitionWithoutType.from_dict(obj.get("definition")) if obj.get("definition") is not None else None,
            "options": AudiencePreviewOptions.from_dict(obj.get("options")) if obj.get("options") is not None else None
        })
        return _obj


