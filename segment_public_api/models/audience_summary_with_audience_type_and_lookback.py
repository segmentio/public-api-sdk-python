# coding: utf-8

"""
    Segment Public API

    The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 

    The version of the OpenAPI document: 59.1.0
    Contact: friends@segment.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from segment_public_api.models.audience_compute_cadence import AudienceComputeCadence
from segment_public_api.models.audience_conditions_wrapper import AudienceConditionsWrapper
from segment_public_api.models.audience_definition import AudienceDefinition
from segment_public_api.models.audience_options_with_lookback import AudienceOptionsWithLookback
from segment_public_api.models.audience_schedule import AudienceSchedule
from segment_public_api.models.audience_size import AudienceSize

class AudienceSummaryWithAudienceTypeAndLookback(BaseModel):
    """
    AudienceSummaryWithAudienceTypeAndLookback
    """
    compute_cadence: AudienceComputeCadence = Field(..., alias="computeCadence")
    size: Optional[AudienceSize] = None
    options: Optional[AudienceOptionsWithLookback] = None
    schedules: Optional[conlist(AudienceSchedule)] = Field(None, description="List of schedules for the audience.")
    id: StrictStr = Field(..., description="Audience id.")
    space_id: StrictStr = Field(..., alias="spaceId", description="Space id for the audience.")
    name: StrictStr = Field(..., description="Name of the audience.")
    description: Optional[StrictStr] = Field(None, description="Description of the audience.")
    key: StrictStr = Field(..., description="Key for the audience.")
    enabled: StrictBool = Field(..., description="Enabled/disabled status for the audience.")
    definition: Optional[AudienceDefinition] = Field(...)
    conditions: Optional[conlist(AudienceConditionsWrapper)] = Field(None, description="Array of conditions in different formats (AST, CQL) - Enhanced format.")
    status: Optional[StrictStr] = Field(None, description="Status for the audience.  Possible values: Backfilling, Computing, Failed, Live, Awaiting Destinations, Disabled.")
    created_by: StrictStr = Field(..., alias="createdBy", description="User id who created the audience.")
    updated_by: StrictStr = Field(..., alias="updatedBy", description="User id who last updated the audience.")
    created_at: StrictStr = Field(..., alias="createdAt", description="Date the audience was created.")
    updated_at: StrictStr = Field(..., alias="updatedAt", description="Date the audience was last updated.")
    audience_type: StrictStr = Field(..., alias="audienceType", description="Denotes the type of audience product.")
    __properties = ["computeCadence", "size", "options", "schedules", "id", "spaceId", "name", "description", "key", "enabled", "definition", "conditions", "status", "createdBy", "updatedBy", "createdAt", "updatedAt", "audienceType"]

    @validator('audience_type')
    def audience_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ACCOUNTS', 'LINKED', 'USERS'):
            raise ValueError("must be one of enum values ('ACCOUNTS', 'LINKED', 'USERS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AudienceSummaryWithAudienceTypeAndLookback:
        """Create an instance of AudienceSummaryWithAudienceTypeAndLookback from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of compute_cadence
        if self.compute_cadence:
            _dict['computeCadence'] = self.compute_cadence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in schedules (list)
        _items = []
        if self.schedules:
            for _item in self.schedules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['schedules'] = _items
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['definition'] = self.definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item in self.conditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conditions'] = _items
        # set to None if definition (nullable) is None
        # and __fields_set__ contains the field
        if self.definition is None and "definition" in self.__fields_set__:
            _dict['definition'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AudienceSummaryWithAudienceTypeAndLookback:
        """Create an instance of AudienceSummaryWithAudienceTypeAndLookback from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AudienceSummaryWithAudienceTypeAndLookback.parse_obj(obj)

        _obj = AudienceSummaryWithAudienceTypeAndLookback.parse_obj({
            "compute_cadence": AudienceComputeCadence.from_dict(obj.get("computeCadence")) if obj.get("computeCadence") is not None else None,
            "size": AudienceSize.from_dict(obj.get("size")) if obj.get("size") is not None else None,
            "options": AudienceOptionsWithLookback.from_dict(obj.get("options")) if obj.get("options") is not None else None,
            "schedules": [AudienceSchedule.from_dict(_item) for _item in obj.get("schedules")] if obj.get("schedules") is not None else None,
            "id": obj.get("id"),
            "space_id": obj.get("spaceId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "key": obj.get("key"),
            "enabled": obj.get("enabled"),
            "definition": AudienceDefinition.from_dict(obj.get("definition")) if obj.get("definition") is not None else None,
            "conditions": [AudienceConditionsWrapper.from_dict(_item) for _item in obj.get("conditions")] if obj.get("conditions") is not None else None,
            "status": obj.get("status"),
            "created_by": obj.get("createdBy"),
            "updated_by": obj.get("updatedBy"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "audience_type": obj.get("audienceType")
        })
        return _obj


